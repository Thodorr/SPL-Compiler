package de.thm.mni.compilerbau.phases._02_03_parser;

import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.*;
import de.thm.mni.compilerbau.phases._01_scanner.Scanner;
import de.thm.mni.compilerbau.absyn.*;
import de.thm.mni.compilerbau.table.Identifier;
import de.thm.mni.compilerbau.utils.SplError;
import de.thm.mni.compilerbau.CommandLineOptions;

parser code {:
  public CommandLineOptions options = null;

  public void syntax_error(Symbol currentToken) {
    throw SplError.SyntaxError(new Position(currentToken.left, currentToken.right), ((Scanner)getScanner()).yytext());
  }
  
  /**
   * @return An empty list. (Uses LinkedList)
   */
  public static <E> List<E> nil() {
      return new LinkedList<E>();
  }
  
  /**
   * Constructs a list from a head and a tail without modifying the tail (Uses LinkedList).
   * Use this as a helper if you don't want to deal with constructing lists manually.
   *
   * @param head The head of the list
   * @param tail The tail of the list
   * @return A list containing the head element and all elements of tail
   */
  public static <E> List<E> cons(E head, List<E> tail) {
    List<E> copy = new LinkedList(tail);
    copy.add(0, head);
    return copy;
  }
:}

/* Terminals/Tokens */
terminal LBRACK, RBRACK, LPAREN, RPAREN, LCURL, RCURL;         //Braces, parenthesis, brackets
terminal LT, LE, GT, GE, NE, EQ;                               //Comparison operators
terminal PLUS, MINUS, STAR, SLASH;                             //Arithmetic operators
terminal ASGN, COMMA, COLON, SEMIC;                            //Other delimiters
terminal TYPE, PROC, ARRAY, OF, REF, VAR, IF, ELSE, WHILE;     //Keywords

terminal Identifier IDENT;    //Identifiers
terminal Integer INTLIT;      //Integer literals

terminal UMINUS;


/* Non-terminals */
non terminal Program;
non terminal List<GlobalDeclaration> GlobalDeclarations;
non terminal GlobalDeclaration GlobalDeclaration;
non terminal TypeDeclaration TypeDeclaration;
non terminal TypeExpression Type;
non terminal NamedTypeExpression NameType;
non terminal ArrayTypeExpression ArrayType;
non terminal ProcedureDeclaration ProcedureDeclaration;
non terminal List<ParameterDeclaration> ParameterDeclarations;
non terminal List<ParameterDeclaration> ParameterDeclarationsOrEmpty;
non terminal ParameterDeclaration ParameterDeclaration;
non terminal CompoundStatement Block;
non terminal List<Statement> StatementsOrEmpty;
non terminal List<Statement> Statements;
non terminal Statement Statement;
non terminal WhileStatement WhileStatement;
non terminal IfStatement IfStatement;
non terminal AssignStatement Assignment;
non terminal CallStatement ProcedureCallStatement;
non terminal List<Expression> Arguments;
non terminal List<Expression> ArgumentsOrEmpty;
non terminal Expression Expression;
non terminal BinaryExpression OpExpression;
non terminal BinaryExpression MathExpression;
non terminal BinaryExpression CompExpression;
non terminal VariableExpression VarExpression;
non terminal Variable Var;
non terminal Identifier SimpleVar;
non terminal ArrayAccess ArrayVar;
non terminal VariableDeclaration VariableDeclaration;
non terminal List<VariableDeclaration> VariableDeclarations;



/* PRECENDENCE */

precedence left LT, LE, EQ, GE, GT, NE;
precedence left PLUS, MINUS;
precedence left STAR, SLASH;
precedence right UMINUS;

start with Program;

Program                 ::= GlobalDeclarations:decs{:
                            RESULT = new Program(new Position(decsleft, decsright), decs);
                        :};

GlobalDeclarations      ::= GlobalDeclaration:decl GlobalDeclarations:decls {:
                            RESULT = cons(decl, decls);
                         :}
                         | {: /* leer */
                            RESULT = nil();
                         :};

GlobalDeclaration       ::= TypeDeclaration:decl {:
                            RESULT = decl;
                         :}
                         | ProcedureDeclaration:decl {:
                            RESULT = decl;
                         :};

TypeDeclaration         ::= TYPE:tag IDENT:name EQ Type:type SEMIC{:
                            RESULT = new TypeDeclaration(new Position(tagleft, tagright), name, type);
                        :};

Type                    ::= NameType:tag {:
                            RESULT = tag;
                        :}
                         | ArrayType:tag {:
                            RESULT = tag;
                        :};

NameType                ::= IDENT:name {:
                            RESULT = new NamedTypeExpression(new Position(nameleft, nameright), name);
                        :};

ArrayType               ::= ARRAY:tag LBRACK INTLIT:size RBRACK OF Type:type {:
                            RESULT = new ArrayTypeExpression(new Position(tagleft, tagright), size, type);
                        :};

ProcedureDeclaration    ::= PROC:tag IDENT:name LPAREN ParameterDeclarationsOrEmpty:params RPAREN LCURL VariableDeclarations:vars StatementsOrEmpty:body RCURL {:
                            RESULT = new ProcedureDeclaration(new Position(tagleft, tagright), name, params, vars, body);
                        :};

ParameterDeclarationsOrEmpty ::= ParameterDeclarations:params {:
                                RESULT = params;
                            :}
                            | /* leer */ {:
                                RESULT = nil();
                            :};

ParameterDeclarations   ::= ParameterDeclaration:param COMMA ParameterDeclarations:params {:
                            RESULT = cons(param, params);
                        :}
                         | ParameterDeclaration:param {:
                            RESULT = cons(param, nil());
                        :};

ParameterDeclaration    ::= IDENT:name COLON Type:type {:
                            RESULT = new ParameterDeclaration(new Position(nameleft, nameright), name, type, false);
                        :}
                         | REF:tag IDENT:name COLON Type:type {:
                            RESULT = new ParameterDeclaration(new Position(tagleft, tagright), name, type, true);
                         :};

Block                   ::= LCURL StatementsOrEmpty:statements RCURL {:
                            RESULT = new CompoundStatement(new Position(statementsleft, statementsright), statements);
                        :};

StatementsOrEmpty       ::= Statements:statements {:
                            RESULT = statements;
                        :}
                         | /* leer */ {:
                            RESULT = nil();
                        :};

Statements              ::= Statement:firstStatement Statements:statements {:
                            RESULT = cons(firstStatement, statements);
                        :}
                         | Statement:statement {:
                            RESULT = cons(statement, nil());
                            RESULT = cons(statement, nil());
                        :};

WhileStatement          ::= WHILE:loop LPAREN Expression:condition RPAREN Statement:statement {:
                            RESULT = new WhileStatement(new Position(loopleft, loopright), condition, statement);
                        :};

IfStatement             ::= IF:tag LPAREN Expression:condition RPAREN Statement:then {:
                            RESULT = new IfStatement(new Position(tagleft, tagright), condition, then, new EmptyStatement(Position.ERROR_POSITION));
                        :}
                          | IF:tag LPAREN Expression:condition RPAREN Statement:then ELSE Statement:not {:
                            RESULT = new IfStatement(new Position(tagleft, tagright), condition, then, not);
                        :};

Statement               ::= Assignment:tag {:
                            RESULT = tag;
                        :}
                          | Block:tag {:
                            RESULT = tag;
                        :}
                          | ProcedureCallStatement:tag {:
                            RESULT = tag;
                        :}
                          | IfStatement:tag {:
                            RESULT = tag;
                        :}
                          | WhileStatement:tag {:
                            RESULT = tag;
                        :}
                          | SEMIC:tag {:
                            RESULT = new EmptyStatement(new Position(tagleft, tagright));
                        :};

Assignment              ::= Var:target ASGN Expression:value SEMIC{:
                            RESULT = new AssignStatement(new Position(targetleft, targetright), target, value);
                        :};

ProcedureCallStatement  ::= IDENT:name LPAREN ArgumentsOrEmpty:arguments RPAREN SEMIC{:
                            RESULT = new CallStatement(new Position(nameleft, nameright), name, arguments);
                        :};

ArgumentsOrEmpty        ::= Arguments:arguments {:
                            RESULT = arguments;
                        :}
                         | /* leer */ {:
                            RESULT = nil();
                        :};

Arguments               ::= Expression:expression COMMA Arguments:arguments {:
                            RESULT = cons(expression, arguments);
                        :}
                         | Expression:expression {:
                            RESULT = cons(expression, nil());
                        :};

Expression              ::= LPAREN Expression:expression RPAREN {:
                            RESULT = expression;
                        :}
                         | OpExpression:expression {:
                            RESULT = expression;
                        :}
                         | INTLIT:value {:
                            RESULT = new IntLiteral(new Position(valueleft, valueright), value);
                        :}
                         | VarExpression:expression {:
                            RESULT = expression;
                         :}
                         | MINUS:operator Expression:operant {:
                            RESULT = new UnaryExpression(new Position(operatorleft, operatorright), UnaryExpression.Operator.MINUS, operant);
                         :} %prec UMINUS;

OpExpression            ::= CompExpression:tag {:
                            RESULT = tag;
                         :}
                         | MathExpression:tag {:
                            RESULT = tag;
                         :};

MathExpression          ::= Expression:lexpression PLUS Expression:rexpression {:
                            RESULT = new BinaryExpression(new Position(lexpressionleft, lexpressionright), BinaryExpression.Operator.ADD, lexpression, rexpression);
                         :}
                         | Expression:lexpression MINUS Expression:rexpression {:
                            RESULT = new BinaryExpression(new Position(lexpressionleft, lexpressionright), BinaryExpression.Operator.SUB, lexpression, rexpression);
                         :}
                         | Expression:lexpression STAR Expression:rexpression {:
                            RESULT = new BinaryExpression(new Position(lexpressionleft, lexpressionright), BinaryExpression.Operator.MUL, lexpression, rexpression);
                         :}
                         | Expression:lexpression SLASH Expression:rexpression {:
                            RESULT = new BinaryExpression(new Position(lexpressionleft, lexpressionright), BinaryExpression.Operator.DIV, lexpression, rexpression);
                         :};

CompExpression          ::= Expression:lexpression LT Expression:rexpression {:
                            RESULT = new BinaryExpression(new Position(lexpressionleft, lexpressionright), BinaryExpression.Operator.LST, lexpression, rexpression);
                         :}
                         | Expression:lexpression LE Expression:rexpression {:
                            RESULT = new BinaryExpression(new Position(lexpressionleft, lexpressionright), BinaryExpression.Operator.LSE, lexpression, rexpression);
                         :}
                         | Expression:lexpression EQ Expression:rexpression {:
                            RESULT = new BinaryExpression(new Position(lexpressionleft, lexpressionright), BinaryExpression.Operator.EQU, lexpression, rexpression);
                         :}
                         | Expression:lexpression GE Expression:rexpression {:
                            RESULT = new BinaryExpression(new Position(lexpressionleft, lexpressionright), BinaryExpression.Operator.GRE, lexpression, rexpression);
                         :}
                         | Expression:lexpression GT Expression:rexpression {:
                            RESULT = new BinaryExpression(new Position(lexpressionleft, lexpressionright), BinaryExpression.Operator.GRT, lexpression, rexpression);
                         :}
                         | Expression:lexpression NE Expression:rexpression{:
                            RESULT = new BinaryExpression(new Position(lexpressionleft, lexpressionright), BinaryExpression.Operator.NEQ, lexpression, rexpression);
                         :};

VariableDeclarations    ::= VariableDeclaration:vardec VariableDeclarations:vardecs {:
                            RESULT = cons(vardec, vardecs);
                         :}
                         | /* leer */ {:
                            RESULT = nil();
                         :};

VariableDeclaration     ::= VAR:tag IDENT:name COLON Type:type SEMIC{:
                            RESULT = new VariableDeclaration(new Position(tagleft, tagright), name, type);
                        :};

VarExpression           ::= Var:var {:
                            RESULT = new VariableExpression(new Position(varleft, varright), var);
                        :};

Var                     ::= SimpleVar:var {:
                            RESULT = new NamedVariable(new Position(varleft, varright), var);
                        :}
                         | ArrayVar:var {:
                            RESULT = var;
                        :};

SimpleVar               ::= IDENT:var {:
                            RESULT = var;
                        :};

ArrayVar                ::= Var:var LBRACK Expression:expression RBRACK {:
                            RESULT = new ArrayAccess(new Position(varleft, varright), var, expression);
                        :};